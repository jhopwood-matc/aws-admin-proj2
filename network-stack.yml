AWSTemplateFormatVersion: 2010-09-09

Description: Deploy Network and Security Groups for Project 1

# This template deploys the network portion of the production infrastructure to
# host a simple we application.

Resources:

  # We are going to deploy 4 subnets in our network --2 public and 2 private.
  # The private ones will contain the EC2 Web server instances.
  # The public ones will be used to associate with the application load balancer
  # which we are also deploying in this network.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: production-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: production-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # These two public subnets are going to be empty, but optionally, we could add
  # a bastion host to troubleshoot the web servers if issues are encountered.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: production-pubsub1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: production-pubsub2
      VpcId: !Ref VPC

  # Each one of these private subnets are going to contain a EC2 web server
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: production-privsub1
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: production-privsub2
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: production-pubrt
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # We are going to use HTTP and not HTTPS
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http to application load balancer
      GroupName: production-alb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80

  WebInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow alb traffic to web instance
      GroupName: production-web-sg
      VpcId: !Ref VPC

  WebInstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebInstanceSecurityGroup
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ALBSecurityGroup

Outputs:

  VPC:
    Value: !Ref VPC

  PrivateSubnet1:
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Value: !Ref PrivateSubnet2

  PublicSubnet1:
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Value: !Ref PublicSubnet2

  WebInstanceSecurityGroup:
    Value: !Ref WebInstanceSecurityGroup

  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup